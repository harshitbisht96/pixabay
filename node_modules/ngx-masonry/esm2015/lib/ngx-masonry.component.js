/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, ElementRef, EventEmitter, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
let /** @type {?} */ imagesLoaded;
let /** @type {?} */ masonryConstructor;
export class NgxMasonryComponent {
    /**
     * @param {?} platformId
     * @param {?} _element
     */
    constructor(platformId, _element) {
        this.platformId = platformId;
        this._element = _element;
        this.useImagesLoaded = false;
        this.updateLayout = false;
        // Outputs
        this.layoutComplete = new EventEmitter();
        this.removeComplete = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.useImagesLoaded && imagesLoaded === undefined) {
            imagesLoaded = require('imagesloaded');
        }
        if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {
            masonryConstructor = require('masonry-layout');
        }
        // Create masonry options object
        if (!this.options) {
            this.options = {};
        }
        // Set default itemSelector
        if (!this.options.itemSelector) {
            this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';
        }
        if (isPlatformBrowser(this.platformId)) {
            // Initialize Masonry
            this._msnry = new masonryConstructor(this._element.nativeElement, this.options);
            // Bind to events
            this._msnry.on('layoutComplete', (items) => {
                this.layoutComplete.emit(items);
            });
            this._msnry.on('removeComplete', (items) => {
                this.removeComplete.emit(items);
            });
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // only update layout if it's not the first change
        if (changes["updateLayout"]) {
            if (!changes["updateLayout"].firstChange) {
                this.layout();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._msnry) {
            this._msnry.destroy();
        }
    }
    /**
     * @return {?}
     */
    layout() {
        setTimeout(() => {
            this._msnry.layout();
        });
    }
    /**
     * @return {?}
     */
    reloadItems() {
        setTimeout(() => {
            this._msnry.reloadItems();
        });
    }
    /**
     * @param {?} element
     * @return {?}
     */
    add(element) {
        let /** @type {?} */ isFirstItem = false;
        // Check if first item
        if (this._msnry.items.length === 0) {
            isFirstItem = true;
        }
        if (this.useImagesLoaded) {
            imagesLoaded(element, (instance) => {
                this._element.nativeElement.appendChild(element);
                // Tell Masonry that a child element has been added
                this._msnry.appended(element);
                // layout if first item
                if (isFirstItem) {
                    this.layout();
                }
            });
            this._element.nativeElement.removeChild(element);
        }
        else {
            // Tell Masonry that a child element has been added
            this._msnry.appended(element);
            // layout if first item
            if (isFirstItem) {
                this.layout();
            }
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    remove(element) {
        // Tell Masonry that a child element has been removed
        this._msnry.remove(element);
        // Layout items
        this.layout();
    }
}
NgxMasonryComponent.decorators = [
    { type: Component, args: [{
                selector: '[ngx-masonry], ngx-masonry',
                template: '<ng-content></ng-content>',
                styles: [
                    `
		:host {
			display: block;
		}
	`
                ]
            },] },
];
/** @nocollapse */
NgxMasonryComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: ElementRef, },
];
NgxMasonryComponent.propDecorators = {
    "options": [{ type: Input },],
    "useImagesLoaded": [{ type: Input },],
    "updateLayout": [{ type: Input },],
    "layoutComplete": [{ type: Output },],
    "removeComplete": [{ type: Output },],
};
function NgxMasonryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxMasonryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxMasonryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxMasonryComponent.propDecorators;
    /** @type {?} */
    NgxMasonryComponent.prototype._msnry;
    /** @type {?} */
    NgxMasonryComponent.prototype.options;
    /** @type {?} */
    NgxMasonryComponent.prototype.useImagesLoaded;
    /** @type {?} */
    NgxMasonryComponent.prototype.updateLayout;
    /** @type {?} */
    NgxMasonryComponent.prototype.layoutComplete;
    /** @type {?} */
    NgxMasonryComponent.prototype.removeComplete;
    /** @type {?} */
    NgxMasonryComponent.prototype.platformId;
    /** @type {?} */
    NgxMasonryComponent.prototype._element;
}

//# sourceMappingURL=data:application/json;base64,