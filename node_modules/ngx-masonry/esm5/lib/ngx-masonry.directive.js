/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Inject, ElementRef, forwardRef, PLATFORM_ID } from '@angular/core';
import { NgxMasonryComponent } from './ngx-masonry.component';
import { isPlatformBrowser } from '@angular/common';
/**
 * @record
 */
function MutationWindow() { }
function MutationWindow_tsickle_Closure_declarations() {
    /** @type {?} */
    MutationWindow.prototype.MutationObserver;
    /** @type {?} */
    MutationWindow.prototype.WebKitMutationObserver;
}
var NgxMasonryDirective = /** @class */ (function () {
    function NgxMasonryDirective(_element, _parent, platformId) {
        this._element = _element;
        this._parent = _parent;
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    NgxMasonryDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.add(this._element.nativeElement);
            this.watchForHtmlChanges();
        }
    };
    /**
     * @return {?}
     */
    NgxMasonryDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this._parent.remove(this._element.nativeElement);
        }
    };
    /**
     * When HTML in brick changes dinamically, observe that and change layout
     * @return {?}
     */
    NgxMasonryDirective.prototype.watchForHtmlChanges = /**
     * When HTML in brick changes dinamically, observe that and change layout
     * @return {?}
     */
    function () {
        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
        if (MutationObserver) {
            /**
             * Watch for any changes to subtree
             */
            var /** @type {?} */ self_1 = this;
            var /** @type {?} */ observer = new MutationObserver(function (mutations, observerFromElement) {
                self_1._parent.layout();
            });
            // define what element should be observed by the observer
            // and what types of mutations trigger the callback
            observer.observe(this._element.nativeElement, {
                subtree: true,
                childList: true
            });
        }
    };
    NgxMasonryDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxMasonryItem], ngxMasonryItem'
                },] },
    ];
    /** @nocollapse */
    NgxMasonryDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return NgxMasonryComponent; }),] },] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    return NgxMasonryDirective;
}());
export { NgxMasonryDirective };
function NgxMasonryDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxMasonryDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxMasonryDirective.ctorParameters;
    /** @type {?} */
    NgxMasonryDirective.prototype._element;
    /** @type {?} */
    NgxMasonryDirective.prototype._parent;
    /** @type {?} */
    NgxMasonryDirective.prototype.platformId;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hc29ucnkvIiwic291cmNlcyI6WyJsaWIvbmd4LW1hc29ucnkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUE0QixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakgsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7Ozs7OztJQWFsRCw2QkFDVSxVQUVBLFNBQ3FCO1FBSHJCLGFBQVEsR0FBUixRQUFRO1FBRVIsWUFBTyxHQUFQLE9BQU87UUFDYyxlQUFVLEdBQVYsVUFBVTtLQUNyQzs7OztJQUVKLDZDQUFlOzs7SUFBZjtRQUNFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM1QjtLQUNGOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0UsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2xEO0tBQ0Y7Ozs7O0lBR08saURBQW1COzs7OztRQUN6QixnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLElBQUksTUFBTSxDQUFDLHNCQUFzQixDQUFDO1FBRTVFLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7OztZQUVyQixxQkFBTSxNQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLHFCQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVMsU0FBUyxFQUFFLG1CQUFtQjtnQkFDM0UsTUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN2QixDQUFDLENBQUM7OztZQUlILFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7Z0JBQzVDLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRSxJQUFJO2FBQ2hCLENBQUMsQ0FBQztTQUNKOzs7Z0JBekNKLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0NBQWtDO2lCQUM3Qzs7OztnQkFkMkIsVUFBVTtnQkFFN0IsbUJBQW1CLHVCQWdCdkIsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsbUJBQW1CLEVBQW5CLENBQW1CLENBQUM7Z0RBRTVDLE1BQU0sU0FBQyxXQUFXOzs4QkFwQnZCOztTQWVhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5neE1hc29ucnlDb21wb25lbnQgfSBmcm9tICcuL25neC1tYXNvbnJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmludGVyZmFjZSBNdXRhdGlvbldpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gIE11dGF0aW9uT2JzZXJ2ZXI6IGFueTtcbiAgV2ViS2l0TXV0YXRpb25PYnNlcnZlcjogYW55O1xufVxuXG5kZWNsYXJlIHZhciB3aW5kb3c6IE11dGF0aW9uV2luZG93O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4TWFzb25yeUl0ZW1dLCBuZ3hNYXNvbnJ5SXRlbSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWFzb25yeURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5neE1hc29ucnlDb21wb25lbnQpKVxuICAgIHByaXZhdGUgX3BhcmVudDogTmd4TWFzb25yeUNvbXBvbmVudCxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueVxuICApIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLl9wYXJlbnQuYWRkKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLndhdGNoRm9ySHRtbENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBXaGVuIEhUTUwgaW4gYnJpY2sgY2hhbmdlcyBkaW5hbWljYWxseSwgb2JzZXJ2ZSB0aGF0IGFuZCBjaGFuZ2UgbGF5b3V0ICovXG4gIHByaXZhdGUgd2F0Y2hGb3JIdG1sQ2hhbmdlcygpOiB2b2lkIHtcbiAgICBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cbiAgICBpZiAoTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLyoqIFdhdGNoIGZvciBhbnkgY2hhbmdlcyB0byBzdWJ0cmVlICovXG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zLCBvYnNlcnZlckZyb21FbGVtZW50KSB7XG4gICAgICAgIHNlbGYuX3BhcmVudC5sYXlvdXQoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBkZWZpbmUgd2hhdCBlbGVtZW50IHNob3VsZCBiZSBvYnNlcnZlZCBieSB0aGUgb2JzZXJ2ZXJcbiAgICAgIC8vIGFuZCB3aGF0IHR5cGVzIG9mIG11dGF0aW9ucyB0cmlnZ2VyIHRoZSBjYWxsYmFja1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==