{"version":3,"sources":["ng://ngx-masonry/lib/ngx-masonry.component.ts","ng://ngx-masonry/lib/ngx-masonry.directive.ts","ng://ngx-masonry/lib/ngx-masonry.module.ts"],"names":["imagesLoaded","masonryConstructor","NgxMasonryComponent","platformId","_element","this","EventEmitter","prototype","ngOnInit","_this","useImagesLoaded","undefined","require","isPlatformBrowser","options","itemSelector","_msnry","nativeElement","on","items","layoutComplete","emit","removeComplete","ngOnChanges","changes","firstChange","layout","ngOnDestroy","destroy","setTimeout","reloadItems","add","element","isFirstItem","length","instance","appendChild","appended","removeChild","remove","Component","args","selector","template","styles","Inject","PLATFORM_ID","ElementRef","Input","Output","NgxMasonryDirective","_parent","ngAfterViewInit","watchForHtmlChanges","MutationObserver","window","WebKitMutationObserver","self_1","mutations","observerFromElement","observe","subtree","childList","Directive","decorators","type","forwardRef","NgxMasonryModule","NgModule","imports","declarations","exports"],"mappings":"+TAgBA,IAAIA,EACAC,eAgBF,SAAAC,EAAyCC,EAAyBC,GAAzBC,KAAAF,WAAAA,EAAyBE,KAAAD,SAAAA,wBAMvB,qBACV,sBAGe,IAAIE,EAAAA,iCACJ,IAAIA,EAAAA,oBAEpDJ,EAAAK,UAAAC,SAAA,WAAA,IAAAC,EAAAJ,KACMA,KAAKK,iBAAmBV,IAAiBW,YAC3CX,EAAeY,QAAQ,iBAGrBC,EAAAA,kBAAkBR,KAAKF,aAAeF,IAAuBU,YAC/DV,EAAqBW,QAAQ,mBAI1BP,KAAKS,UACRT,KAAKS,QAAU,IAIZT,KAAKS,QAAQC,eAChBV,KAAKS,QAAQC,aAAe,oCAG1BF,EAAAA,kBAAkBR,KAAKF,cAEzBE,KAAKW,OAAS,IAAIf,EAAmBI,KAAKD,SAASa,cAAeZ,KAAKS,SAGvET,KAAKW,OAAOE,GAAG,iBAAkB,SAACC,GAChCV,EAAKW,eAAeC,KAAKF,KAE3Bd,KAAKW,OAAOE,GAAG,iBAAkB,SAACC,GAChCV,EAAKa,eAAeD,KAAKF,OAK/BjB,EAAAK,UAAAgB,YAAA,SAAYC,GAENA,EAAO,eACJA,EAAO,aAAcC,aACxBpB,KAAKqB,WAKXxB,EAAAK,UAAAoB,YAAA,WACMtB,KAAKW,QACPX,KAAKW,OAAOY,WAIT1B,EAAAK,UAAAmB,6BACLG,WAAW,WACTpB,EAAKO,OAAOU,YAITxB,EAAAK,UAAAuB,kCACLD,WAAW,WACTpB,EAAKO,OAAOc,iBAKT5B,EAAAK,UAAAwB,aAAIC,cACLC,GAAc,EAGe,IAA7B5B,KAAKW,OAAOG,MAAMe,SACpBD,GAAc,GAGZ5B,KAAKK,iBACPV,EAAagC,EAAS,SAACG,GACrB1B,EAAKL,SAASa,cAAcmB,YAAYJ,GAGxCvB,EAAKO,OAAOqB,SAASL,GAGjBC,GACFxB,EAAKiB,WAITrB,KAAKD,SAASa,cAAcqB,YAAYN,KAGxC3B,KAAKW,OAAOqB,SAASL,GAGjBC,GACF5B,KAAKqB,WAKJxB,EAAAK,UAAAgC,gBAAOP,GAEZ3B,KAAKW,OAAOuB,OAAOP,GAGnB3B,KAAKqB,8BA5HRc,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6BACVC,SAAU,4BACVC,OAAQ,CACN,4HAQWC,EAAAA,OAAMJ,KAAA,CAACK,EAAAA,sBAzBpBC,EAAAA,+CA8BCC,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,8BAGAC,EAAAA,+BACAA,EAAAA,eC5CHC,EAAA,WAgBE,SAAAA,EACU9C,EAEA+C,EACqBhD,GAHrBE,KAAAD,SAAAA,EAEAC,KAAA8C,QAAAA,EACqB9C,KAAAF,WAAAA,SAG/B+C,EAAA3C,UAAA6C,gBAAA,WACMvC,EAAAA,kBAAkBR,KAAKF,cACzBE,KAAK8C,QAAQpB,IAAI1B,KAAKD,SAASa,eAC/BZ,KAAKgD,wBAITH,EAAA3C,UAAAoB,YAAA,WACMd,EAAAA,kBAAkBR,KAAKF,aACzBE,KAAK8C,QAAQZ,OAAOlC,KAAKD,SAASa,gBAK9BiC,EAAA3C,UAAA8C,+BAGN,GAFAC,iBAAmBC,OAAOD,kBAAoBC,OAAOC,uBAEjDF,iBAAkB,CAEpB,IAAMG,EAAOpD,KACI,IAAIiD,iBAAiB,SAASI,EAAWC,GACxDF,EAAKN,QAAQzB,WAKNkC,QAAQvD,KAAKD,SAASa,cAAe,CAC5C4C,SAAS,EACTC,WAAW,0BAvClBC,EAAAA,UAAStB,KAAA,CAAC,CACTC,SAAU,gFAbgBK,EAAAA,kBAEnB7C,EAAmB8D,WAAA,CAAA,CAAAC,KAgBvBpB,EAAAA,OAAMJ,KAAA,CAACyB,EAAAA,WAAW,WAAM,OAAAhE,0CAExB2C,EAAAA,OAAMJ,KAAA,CAACK,EAAAA,oBApBZ,GCAAqB,EAAA,oDAICC,EAAAA,SAAQ3B,KAAA,CAAC,CACR4B,QAAS,GACTC,aAAc,CAACpE,EAAqBgD,GACpCqB,QAAS,CAACrE,EAAqBgD,SAPjC","sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nlet imagesLoaded: any;\nlet masonryConstructor: any;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options';\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public _msnry: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() public useImagesLoaded: Boolean = false;\n  @Input() updateLayout: Boolean = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    let isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) {\n          this.layout();\n        }\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) {\n        this.layout();\n      }\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n  MutationObserver: any;\n  WebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n  constructor(\n    private _element: ElementRef,\n    @Inject(forwardRef(() => NgxMasonryComponent))\n    private _parent: NgxMasonryComponent,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.add(this._element.nativeElement);\n      this.watchForHtmlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.remove(this._element.nativeElement);\n    }\n  }\n\n  /** When HTML in brick changes dinamically, observe that and change layout */\n  private watchForHtmlChanges(): void {\n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    if (MutationObserver) {\n      /** Watch for any changes to subtree */\n      const self = this;\n      const observer = new MutationObserver(function(mutations, observerFromElement) {\n        self._parent.layout();\n      });\n\n      // define what element should be observed by the observer\n      // and what types of mutations trigger the callback\n      observer.observe(this._element.nativeElement, {\n        subtree: true,\n        childList: true\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n"]}