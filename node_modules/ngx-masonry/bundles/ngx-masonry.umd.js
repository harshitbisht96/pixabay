(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-masonry', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-masonry'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ imagesLoaded;
    var /** @type {?} */ masonryConstructor;
    var NgxMasonryComponent = (function () {
        function NgxMasonryComponent(platformId, _element) {
            this.platformId = platformId;
            this._element = _element;
            this.useImagesLoaded = false;
            this.updateLayout = false;
            // Outputs
            this.layoutComplete = new core.EventEmitter();
            this.removeComplete = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        NgxMasonryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.useImagesLoaded && imagesLoaded === undefined) {
                    imagesLoaded = require('imagesloaded');
                }
                if (common.isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {
                    masonryConstructor = require('masonry-layout');
                }
                // Create masonry options object
                if (!this.options) {
                    this.options = {};
                }
                // Set default itemSelector
                if (!this.options.itemSelector) {
                    this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';
                }
                if (common.isPlatformBrowser(this.platformId)) {
                    // Initialize Masonry
                    this._msnry = new masonryConstructor(this._element.nativeElement, this.options);
                    // Bind to events
                    this._msnry.on('layoutComplete', function (items) {
                        _this.layoutComplete.emit(items);
                    });
                    this._msnry.on('removeComplete', function (items) {
                        _this.removeComplete.emit(items);
                    });
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMasonryComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // only update layout if it's not the first change
                if (changes["updateLayout"]) {
                    if (!changes["updateLayout"].firstChange) {
                        this.layout();
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxMasonryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._msnry) {
                    this._msnry.destroy();
                }
            };
        /**
         * @return {?}
         */
        NgxMasonryComponent.prototype.layout = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this._msnry.layout();
                });
            };
        /**
         * @return {?}
         */
        NgxMasonryComponent.prototype.reloadItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    _this._msnry.reloadItems();
                });
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NgxMasonryComponent.prototype.add = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                var _this = this;
                var /** @type {?} */ isFirstItem = false;
                // Check if first item
                if (this._msnry.items.length === 0) {
                    isFirstItem = true;
                }
                if (this.useImagesLoaded) {
                    imagesLoaded(element, function (instance) {
                        _this._element.nativeElement.appendChild(element);
                        // Tell Masonry that a child element has been added
                        // Tell Masonry that a child element has been added
                        _this._msnry.appended(element);
                        // layout if first item
                        if (isFirstItem) {
                            _this.layout();
                        }
                    });
                    this._element.nativeElement.removeChild(element);
                }
                else {
                    // Tell Masonry that a child element has been added
                    this._msnry.appended(element);
                    // layout if first item
                    if (isFirstItem) {
                        this.layout();
                    }
                }
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NgxMasonryComponent.prototype.remove = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                // Tell Masonry that a child element has been removed
                this._msnry.remove(element);
                // Layout items
                this.layout();
            };
        NgxMasonryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[ngx-masonry], ngx-masonry',
                        template: '<ng-content></ng-content>',
                        styles: [
                            "\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"
                        ]
                    },] },
        ];
        /** @nocollapse */
        NgxMasonryComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
                { type: core.ElementRef, },
            ];
        };
        NgxMasonryComponent.propDecorators = {
            "options": [{ type: core.Input },],
            "useImagesLoaded": [{ type: core.Input },],
            "updateLayout": [{ type: core.Input },],
            "layoutComplete": [{ type: core.Output },],
            "removeComplete": [{ type: core.Output },],
        };
        return NgxMasonryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxMasonryDirective = (function () {
        function NgxMasonryDirective(_element, _parent, platformId) {
            this._element = _element;
            this._parent = _parent;
            this.platformId = platformId;
        }
        /**
         * @return {?}
         */
        NgxMasonryDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this._parent.add(this._element.nativeElement);
                    this.watchForHtmlChanges();
                }
            };
        /**
         * @return {?}
         */
        NgxMasonryDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this._parent.remove(this._element.nativeElement);
                }
            };
        /**
         * When HTML in brick changes dinamically, observe that and change layout
         * @return {?}
         */
        NgxMasonryDirective.prototype.watchForHtmlChanges = /**
         * When HTML in brick changes dinamically, observe that and change layout
         * @return {?}
         */
            function () {
                MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
                if (MutationObserver) {
                    /**
                     * Watch for any changes to subtree
                     */
                    var /** @type {?} */ self_1 = this;
                    var /** @type {?} */ observer = new MutationObserver(function (mutations, observerFromElement) {
                        self_1._parent.layout();
                    });
                    // define what element should be observed by the observer
                    // and what types of mutations trigger the callback
                    observer.observe(this._element.nativeElement, {
                        subtree: true,
                        childList: true
                    });
                }
            };
        NgxMasonryDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxMasonryItem], ngxMasonryItem'
                    },] },
        ];
        /** @nocollapse */
        NgxMasonryDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: NgxMasonryComponent, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgxMasonryComponent; }),] },] },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },
            ];
        };
        return NgxMasonryDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxMasonryModule = (function () {
        function NgxMasonryModule() {
        }
        NgxMasonryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgxMasonryComponent, NgxMasonryDirective],
                        exports: [NgxMasonryComponent, NgxMasonryDirective]
                    },] },
        ];
        return NgxMasonryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxMasonryComponent = NgxMasonryComponent;
    exports.NgxMasonryDirective = NgxMasonryDirective;
    exports.NgxMasonryModule = NgxMasonryModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc29ucnkudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtbWFzb25yeS9saWIvbmd4LW1hc29ucnkuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtbWFzb25yeS9saWIvbmd4LW1hc29ucnkuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZ3gtbWFzb25yeS9saWIvbmd4LW1hc29ucnkubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBQTEFURk9STV9JRCxcbiAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5kZWNsYXJlIHZhciByZXF1aXJlOiBhbnk7XG5sZXQgaW1hZ2VzTG9hZGVkOiBhbnk7XG5sZXQgbWFzb25yeUNvbnN0cnVjdG9yOiBhbnk7XG5cbmltcG9ydCB7IE5neE1hc29ucnlPcHRpb25zIH0gZnJvbSAnLi9uZ3gtbWFzb25yeS1vcHRpb25zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW25neC1tYXNvbnJ5XSwgbmd4LW1hc29ucnknLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBzdHlsZXM6IFtcbiAgICBgXG5cdFx0Omhvc3Qge1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0fVxuXHRgXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4TWFzb25yeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueSwgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge31cblxuICBwdWJsaWMgX21zbnJ5OiBhbnk7XG5cbiAgLy8gSW5wdXRzXG4gIEBJbnB1dCgpIHB1YmxpYyBvcHRpb25zOiBOZ3hNYXNvbnJ5T3B0aW9ucztcbiAgQElucHV0KCkgcHVibGljIHVzZUltYWdlc0xvYWRlZDogQm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSB1cGRhdGVMYXlvdXQ6IEJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyBPdXRwdXRzXG4gIEBPdXRwdXQoKSBsYXlvdXRDb21wbGV0ZTogRXZlbnRFbWl0dGVyPGFueVtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55W10+KCk7XG4gIEBPdXRwdXQoKSByZW1vdmVDb21wbGV0ZTogRXZlbnRFbWl0dGVyPGFueVtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55W10+KCk7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudXNlSW1hZ2VzTG9hZGVkICYmIGltYWdlc0xvYWRlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbWFnZXNMb2FkZWQgPSByZXF1aXJlKCdpbWFnZXNsb2FkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSAmJiBtYXNvbnJ5Q29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbWFzb25yeUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbWFzb25yeSBvcHRpb25zIG9iamVjdFxuICAgIGlmICghdGhpcy5vcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBpdGVtU2VsZWN0b3JcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IgPSAnW25neE1hc29ucnlJdGVtXSwgbmd4TWFzb25yeUl0ZW0nO1xuICAgIH1cblxuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAvLyBJbml0aWFsaXplIE1hc29ucnlcbiAgICAgIHRoaXMuX21zbnJ5ID0gbmV3IG1hc29ucnlDb25zdHJ1Y3Rvcih0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgIC8vIEJpbmQgdG8gZXZlbnRzXG4gICAgICB0aGlzLl9tc25yeS5vbignbGF5b3V0Q29tcGxldGUnLCAoaXRlbXM6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmxheW91dENvbXBsZXRlLmVtaXQoaXRlbXMpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9tc25yeS5vbigncmVtb3ZlQ29tcGxldGUnLCAoaXRlbXM6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZUNvbXBsZXRlLmVtaXQoaXRlbXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIG9ubHkgdXBkYXRlIGxheW91dCBpZiBpdCdzIG5vdCB0aGUgZmlyc3QgY2hhbmdlXG4gICAgaWYgKGNoYW5nZXMudXBkYXRlTGF5b3V0KSB7XG4gICAgICBpZiAoIWNoYW5nZXMudXBkYXRlTGF5b3V0LmZpcnN0Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMubGF5b3V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX21zbnJ5KSB7XG4gICAgICB0aGlzLl9tc25yeS5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGxheW91dCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX21zbnJ5LmxheW91dCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlbG9hZEl0ZW1zKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fbXNucnkucmVsb2FkSXRlbXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHB1YmxpYyBhZGQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHByZXBlbmQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICBwdWJsaWMgYWRkKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IGlzRmlyc3RJdGVtID0gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBpZiBmaXJzdCBpdGVtXG4gICAgaWYgKHRoaXMuX21zbnJ5Lml0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaXNGaXJzdEl0ZW0gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVzZUltYWdlc0xvYWRlZCkge1xuICAgICAgaW1hZ2VzTG9hZGVkKGVsZW1lbnQsIChpbnN0YW5jZTogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgICAgICAvLyBUZWxsIE1hc29ucnkgdGhhdCBhIGNoaWxkIGVsZW1lbnQgaGFzIGJlZW4gYWRkZWRcbiAgICAgICAgdGhpcy5fbXNucnkuYXBwZW5kZWQoZWxlbWVudCk7XG5cbiAgICAgICAgLy8gbGF5b3V0IGlmIGZpcnN0IGl0ZW1cbiAgICAgICAgaWYgKGlzRmlyc3RJdGVtKSB7XG4gICAgICAgICAgdGhpcy5sYXlvdXQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGVsbCBNYXNvbnJ5IHRoYXQgYSBjaGlsZCBlbGVtZW50IGhhcyBiZWVuIGFkZGVkXG4gICAgICB0aGlzLl9tc25yeS5hcHBlbmRlZChlbGVtZW50KTtcblxuICAgICAgLy8gbGF5b3V0IGlmIGZpcnN0IGl0ZW1cbiAgICAgIGlmIChpc0ZpcnN0SXRlbSkge1xuICAgICAgICB0aGlzLmxheW91dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW1vdmUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAvLyBUZWxsIE1hc29ucnkgdGhhdCBhIGNoaWxkIGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZFxuICAgIHRoaXMuX21zbnJ5LnJlbW92ZShlbGVtZW50KTtcblxuICAgIC8vIExheW91dCBpdGVtc1xuICAgIHRoaXMubGF5b3V0KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5neE1hc29ucnlDb21wb25lbnQgfSBmcm9tICcuL25neC1tYXNvbnJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmludGVyZmFjZSBNdXRhdGlvbldpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gIE11dGF0aW9uT2JzZXJ2ZXI6IGFueTtcbiAgV2ViS2l0TXV0YXRpb25PYnNlcnZlcjogYW55O1xufVxuXG5kZWNsYXJlIHZhciB3aW5kb3c6IE11dGF0aW9uV2luZG93O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4TWFzb25yeUl0ZW1dLCBuZ3hNYXNvbnJ5SXRlbSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWFzb25yeURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5neE1hc29ucnlDb21wb25lbnQpKVxuICAgIHByaXZhdGUgX3BhcmVudDogTmd4TWFzb25yeUNvbXBvbmVudCxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueVxuICApIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLl9wYXJlbnQuYWRkKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLndhdGNoRm9ySHRtbENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBXaGVuIEhUTUwgaW4gYnJpY2sgY2hhbmdlcyBkaW5hbWljYWxseSwgb2JzZXJ2ZSB0aGF0IGFuZCBjaGFuZ2UgbGF5b3V0ICovXG4gIHByaXZhdGUgd2F0Y2hGb3JIdG1sQ2hhbmdlcygpOiB2b2lkIHtcbiAgICBNdXRhdGlvbk9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cbiAgICBpZiAoTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLyoqIFdhdGNoIGZvciBhbnkgY2hhbmdlcyB0byBzdWJ0cmVlICovXG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zLCBvYnNlcnZlckZyb21FbGVtZW50KSB7XG4gICAgICAgIHNlbGYuX3BhcmVudC5sYXlvdXQoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBkZWZpbmUgd2hhdCBlbGVtZW50IHNob3VsZCBiZSBvYnNlcnZlZCBieSB0aGUgb2JzZXJ2ZXJcbiAgICAgIC8vIGFuZCB3aGF0IHR5cGVzIG9mIG11dGF0aW9ucyB0cmlnZ2VyIHRoZSBjYWxsYmFja1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hNYXNvbnJ5Q29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtbWFzb25yeS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmd4TWFzb25yeURpcmVjdGl2ZSB9IGZyb20gJy4vbmd4LW1hc29ucnkuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW10sXG4gIGRlY2xhcmF0aW9uczogW05neE1hc29ucnlDb21wb25lbnQsIE5neE1hc29ucnlEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4TWFzb25yeUNvbXBvbmVudCwgTmd4TWFzb25yeURpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4TWFzb25yeU1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImlzUGxhdGZvcm1Ccm93c2VyIiwiQ29tcG9uZW50IiwiSW5qZWN0IiwiUExBVEZPUk1fSUQiLCJFbGVtZW50UmVmIiwiSW5wdXQiLCJPdXRwdXQiLCJEaXJlY3RpdmUiLCJmb3J3YXJkUmVmIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQWdCQSxxQkFBSSxZQUFpQixDQUFDO0lBQ3RCLHFCQUFJLGtCQUF1QixDQUFDOztRQWdCMUIsNkJBQXlDLFlBQXlCLFFBQW9CO1lBQTdDLGVBQVUsR0FBVixVQUFVO1lBQWUsYUFBUSxHQUFSLFFBQVEsQ0FBWTttQ0FNM0MsS0FBSztnQ0FDZixLQUFLOztrQ0FHVSxJQUFJQSxpQkFBWSxFQUFTO2tDQUN6QixJQUFJQSxpQkFBWSxFQUFTO1NBWGlCOzs7O1FB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