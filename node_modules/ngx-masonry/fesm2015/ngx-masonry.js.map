{"version":3,"file":"ngx-masonry.js.map","sources":["ng://ngx-masonry/lib/ngx-masonry.component.ts","ng://ngx-masonry/lib/ngx-masonry.directive.ts","ng://ngx-masonry/lib/ngx-masonry.module.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nlet imagesLoaded: any;\nlet masonryConstructor: any;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options';\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public _msnry: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() public useImagesLoaded: Boolean = false;\n  @Input() updateLayout: Boolean = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    let isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) {\n          this.layout();\n        }\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) {\n        this.layout();\n      }\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n  MutationObserver: any;\n  WebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n  constructor(\n    private _element: ElementRef,\n    @Inject(forwardRef(() => NgxMasonryComponent))\n    private _parent: NgxMasonryComponent,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.add(this._element.nativeElement);\n      this.watchForHtmlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.remove(this._element.nativeElement);\n    }\n  }\n\n  /** When HTML in brick changes dinamically, observe that and change layout */\n  private watchForHtmlChanges(): void {\n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    if (MutationObserver) {\n      /** Watch for any changes to subtree */\n      const self = this;\n      const observer = new MutationObserver(function(mutations, observerFromElement) {\n        self._parent.layout();\n      });\n\n      // define what element should be observed by the observer\n      // and what types of mutations trigger the callback\n      observer.observe(this._element.nativeElement, {\n        subtree: true,\n        childList: true\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n"],"names":[],"mappings":"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"}
